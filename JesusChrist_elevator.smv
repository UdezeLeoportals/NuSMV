--BUTTON Process
MODULE JesusChristButton(reset)
   VAR
      pressed : boolean;
   ASSIGN
      init(pressed) := FALSE;
	 next(pressed) :=
	    case
		  pressed & reset : FALSE;
		  pressed & !reset : TRUE;
		  !pressed		   : {FALSE,TRUE};
	    esac;
	--Test the SPEC
	INVARSPEC (reset -> pressed)

--CABIN Process
MODULE JesusChristCabin(move_cmd)
   VAR
      floor	: {1,2,3,4};
	 direction : {standing, moving_up, moving_down};
   ASSIGN 
      init(direction) := standing;
	 next(direction) :=
		case
		   move_cmd = stop	: standing;
		   move_cmd = move_up	: moving_up;
		   move_cmd = move_down	: moving_down;
		   move_cmd = nop	: direction;
		esac;

	  next(floor) :=
		case
		   next(direction) = standing   : floor;
		   next(direction) = moving_up  : case
								   floor = 4  : 4;
								   TRUE : floor + 1;
								   esac;
		   next(direction) = moving_down : case
								    floor = 1 : 1;
								    TRUE : floor - 1;
								   esac;
		esac;
	--Test the Req in the mighty name of our Lord and Saviour Jesus Christ      
	INVARSPEC (move_cmd = stop -> direction in {moving_up, moving_down})
	INVARSPEC (move_cmd in {move_up, move_down} -> direction=standing)
	SPEC AG (floor = 4 -> AX(direction != moving_up))
	SPEC AG (floor = 1 -> AX(direction != moving_down))

-- DOOR Process
MODULE JesusChristDoor(door_cmd)
   VAR
      status : {open, closed };

   ASSIGN
      next(status) :=
	   case
		door_cmd = open : open;
		door_cmd = close : closed;
		door_cmd = nop	 : status;
	   esac;

	INVARSPEC (door_cmd = open -> status = closed)
	INVARSPEC (door_cmd = close -> status = open)

-- Controller Process
MODULE JesusChristCtrl(floor, dir, door, pressed_1, pressed_2, pressed_3, pressed_4)
   VAR
      move_cmd : {move_up, move_down, stop, nop};
	 door_cmd : {open, close, nop};
	 reset_1 : boolean;
	 reset_2 : boolean;
	 reset_3 : boolean;
	 reset_4 : boolean;

   ASSIGN
	reset_1 := (pressed_1 & floor = 1 & door = open);
	reset_2 := (pressed_2 & floor = 2 & door = open);
	reset_3 := (pressed_3 & floor = 3 & door = open);
	reset_4 := (pressed_4 & floor = 4 & door = open);

   DEFINE 
	pending_here := (floor = 1 & pressed_1) | (floor = 2 & pressed_2) | (floor = 3 & pressed_3) | (floor = 4 & pressed_4);
	
	pending_up  := (floor = 1 & (pressed_2 | pressed_3 | pressed_4)) | (floor = 2 & ( pressed_3 | pressed_4)) | (floor = 3 & ( pressed_4));

	pending_down := (floor = 4 & (pressed_1 | pressed_2 | pressed_3)) | (floor = 3 & ( pressed_1 | pressed_2 )) | ( floor = 2 & (pressed_1));

   ASSIGN
	door_cmd :=
	   case
		dir != standing 		  : nop;
		pending_here & door = closed : open;
		pending_up & door = open	  : close;
		pending_down & door = open	  : close;
		TRUE				        : nop;
	   esac;
   VAR
	last_dir : {moving_up, moving_down};
   ASSIGN
	next(last_dir) :=
	   case
		dir = standing : last_dir;
		TRUE           : dir;
	   esac;
   ASSIGN
	move_cmd :=
	   case
		door = open	: nop;
		pending_here	: case
					    dir != standing : stop;
					    TRUE 		    : nop;
					  esac;
		pending_up & pending_down : case
							    dir != standing : nop;
							    last_dir = moving_up : move_up;
							    last_dir = moving_down : move_down;
							  esac;
		pending_up		: case
					    dir != standing : nop;
					    TRUE		    : move_up;
					  esac;
		pending_down 	: case
					   dir != standing  : nop;
					   TRUE		    : move_down;
					  esac;
		TRUE			: nop;
	   esac;

--MAIN process

MODULE main
   VAR
      JESUS_CHRIST_cn : JesusChristCabin(JESUS_CHRIST_ct.move_cmd);
	 JESUS_CHRIST_dr : JesusChristDoor(JESUS_CHRIST_ct.door_cmd);
	 JESUS_CHRIST_b1 :  JesusChristButton(JESUS_CHRIST_ct.reset_1);
	 JESUS_CHRIST_b2 :  JesusChristButton(JESUS_CHRIST_ct.reset_2);
	 JESUS_CHRIST_b3 :  JesusChristButton(JESUS_CHRIST_ct.reset_3);
	 JESUS_CHRIST_b4 :  JesusChristButton(JESUS_CHRIST_ct.reset_4);
	 JESUS_CHRIST_ct :  JesusChristCtrl(JESUS_CHRIST_cn.floor, JESUS_CHRIST_cn.direction, JESUS_CHRIST_dr.status, JESUS_CHRIST_b1.pressed, JESUS_CHRIST_b2.pressed, JESUS_CHRIST_b3.pressed, JESUS_CHRIST_b4.pressed);

--TEST some spec in the name of the Lord Jesus Christ

SPEC AG AF ! JESUS_CHRIST_b1.pressed
SPEC AG AF ! JESUS_CHRIST_b2.pressed
SPEC AG AF ! JESUS_CHRIST_b3.pressed
SPEC AG AF ! JESUS_CHRIST_b4.pressed

SPEC AG (JESUS_CHRIST_b1.pressed -> A[JESUS_CHRIST_b1.pressed  U (JESUS_CHRIST_cn.floor = 1 & JESUS_CHRIST_dr.status = open)])
SPEC AG (JESUS_CHRIST_b2.pressed -> A[JESUS_CHRIST_b2.pressed  U (JESUS_CHRIST_cn.floor = 2 & JESUS_CHRIST_dr.status = open)])
SPEC AG (JESUS_CHRIST_b3.pressed -> A[JESUS_CHRIST_b3.pressed  U (JESUS_CHRIST_cn.floor = 3 & JESUS_CHRIST_dr.status = open)])
SPEC AG (JESUS_CHRIST_b4.pressed -> A[JESUS_CHRIST_b4.pressed  U (JESUS_CHRIST_cn.floor = 4 & JESUS_CHRIST_dr.status = open)])

SPEC AG ((JESUS_CHRIST_b1.pressed & JESUS_CHRIST_cn.floor =1 & JESUS_CHRIST_dr.status = open) -> AX ! JESUS_CHRIST_b1.pressed )
SPEC AG ((JESUS_CHRIST_b2.pressed & JESUS_CHRIST_cn.floor =2 & JESUS_CHRIST_dr.status = open) -> AX ! JESUS_CHRIST_b2.pressed )
SPEC AG ((JESUS_CHRIST_b3.pressed & JESUS_CHRIST_cn.floor =3 & JESUS_CHRIST_dr.status = open) -> AX ! JESUS_CHRIST_b3.pressed )
SPEC AG ((JESUS_CHRIST_b4.pressed & JESUS_CHRIST_cn.floor =4 & JESUS_CHRIST_dr.status = open) -> AX ! JESUS_CHRIST_b4.pressed )

LTLSPEC (JESUS_CHRIST_dr.status = open -> JESUS_CHRIST_cn.direction = standing)

LTLSPEC (((!JESUS_CHRIST_b1.pressed ) & (!JESUS_CHRIST_b2.pressed) & (!JESUS_CHRIST_b3.pressed) & (!JESUS_CHRIST_b4.pressed)) -> (JESUS_CHRIST_ct.door_cmd = nop & JESUS_CHRIST_ct.move_cmd = nop))
